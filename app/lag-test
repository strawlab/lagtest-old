#!/usr/bin/env python
from gi.repository import Gtk, Gdk, GLib, GObject
import serial
import os, sys, time, collections
import numpy as np
import threading, Queue
import json

__version__ = '1.0'

try:
    OrderedDict = collections.OrderedDict
except AttributeError:
    # python 2.6 or earlier
    import ordereddict
    OrderedDict = ordereddict.OrderedDict

from time_model import get_time_model, TimeFitError
from lag_plot_window import LagPlotCanvas

GObject.threads_init()
Gdk.threads_init()

def uint32(b0,b1,b2,b3):
    return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0

def uint16(b0,b1):
    return (b1 << 8) + b0

if sys.platform.startswith('win'):
    time_func = time.clock
else:
    time_func = time.time

QUERY_DT = 1.0 # n seconds between clock info requests
DRAW_DT = 1.0/60.0 # 60 fps
SWITCH_DT = 0.5 # switch black/white twice per second
PLOT_DT = 0.5 # update plots twice per second
TRIM_DT = 60.0 # trim accummulated data every minute

class NoValidSerialError(serial.serialutil.SerialException):
    pass

def _setup_serial():
    port = os.environ.get('LAG_TEST_PORT', None)
    if port is not None:
        ports = [port]
    else:
        if sys.platform.startswith('linux'):
            ports = ['/dev/ttyUSB0',
                     '/dev/ttyACM0',
                     ]
        else:
            raise RuntimeError('Do not know default serial ports on your '
                               'platform. Set environment variable '
                               'LAG_TEST_PORT.')
    ser = None
    for port in ports:
        try:
            ser = serial.Serial(port=port,
                                timeout=0.01,
                                baudrate=115200,
                                )
        except serial.serialutil.SerialException:
            continue
        else:
            break
    if ser is None:
        raise NoValidSerialError('Could not find serial port at any of %r'%ports)
    return ser

def make_recarray( orig, n0, n1 ):
    arr0 = np.array([row[0] for row in orig])
    arr1 = np.array([row[1] for row in orig])
    result = np.empty( (len(arr0),), dtype=
                       [(n0,arr0.dtype),(n1,arr1.dtype)])
    result[n0] = arr0
    result[n1] = arr1
    return result

class SerialThread(threading.Thread):
    def __init__(self,name,args):
        super(SerialThread,self).__init__(name=name)
        self.__args=args

    def set_led(self,value):
        char = chr(value)
        self.ser.write('L'+char)

    def run(self):
        self.last_time = time_func() + 0.5 # give half a second to flush buffers
        self._qi = 0
        self._queries = OrderedDict()

        self._vquery_time = time_func()+2.5
        self._version_check_started = False
        self._version_check_done = False

        self.adc_q, self.time_q, self.outq, self.vq = self.__args

        try:
            self.ser = _setup_serial()
        except NoValidSerialError:
            self.vq.put('Failed to detect USB. Generating fake data.')
            raise
        self.ser.open()

        buf = ''
        while 1:

            # get all pending data
            while 1:
                try:
                    led_value = self.outq.get_nowait()
                    self.set_led(led_value)
                except Queue.Empty:
                    break

            buf += self.ser.read()
            while len(buf) >= 9:
                buf = self._h(buf)

            now = time_func()
            if (now - self.last_time) > QUERY_DT:
                # request sample

                self._queries[ self._qi ] = now

                self.ser.write( 'P'+chr(self._qi) )

                self._qi = (self._qi + 1) % 256
                self.last_time = now

            # version check
            if not self._version_check_done:
                if not self._version_check_started:
                    if now >= self._vquery_time:
                        self.ser.write( 'V?' )
                        self._version_check_started = True
                        self.vq.put('checking...')

                if (now - self._vquery_time) > 2.5:
                    self.vq.put('no response')

    def _handle_version(self, value, epoch, count):
        assert value==2
        self._vquery_time = time_func()
        self._version_check_done = True
        self.vq.put('OK')

    def _handle_returned_timestamp(self, qi, epoch, counter):
        now = time_func()

        while len(self._queries) > 50:
            old_qi = self._queries.popitem(last=False)
            print 'old_qi',old_qi
            print 'WARNING: never got return for query %d'%old_qi

        try:
            send_timestamp = self._queries.pop( qi )
        except KeyError:
            print 'WARNING: could not find original data for query %d'%qi
            return

        max_error = now-send_timestamp
        if max_error > 0.015: # 15 msec cutoff
            print 'WARNING: clock sample took %.1f msec. Ignoring value.'%( max_error*1e3 )
            return

        ino_time_estimate = (now+send_timestamp)*0.5
        ino_stamp = epoch*2**16 + counter

        self.time_q.put( (ino_time_estimate, ino_stamp) )

    def _h(self,buf):
        result = buf
        if len(buf) >= 9:
            valid = False

            if buf[0] in ('H','P','V','L'):
                packet_type = buf[0]
                bytes = [ord(char) for char in buf[1:9]]
                value = bytes[0]
                e0,e1,e2,e3 = bytes[1:5]
                t0,t1 = bytes[5:7]
                expected_chksum = bytes[7]
                actual_chksum = sum( bytes[:7] ) % 256

                if actual_chksum == expected_chksum:
                    valid = True
                epoch = uint32(e0,e1,e2,e3)
                count = uint16(t0,t1)

                if packet_type == 'H':
                    C_arduino = epoch*2**16 + count
                    self.adc_q.put( (C_arduino,value) )
                elif packet_type == 'P':
                    self._handle_returned_timestamp(value, epoch, count )
                elif packet_type == 'V':
                    self._handle_version(value, epoch, count )
                elif packet_type == 'L':
                    pass

            if valid:
                result = buf[9:]

            if not valid:
                print 'not valid'
                result = buf[1:] # ignore this potential start and do a frame-shift

        return result

class MyApp:
    def __init__(self):
        b = self.builder = Gtk.Builder()
        b.add_from_file("lag-test-gtk.ui")
        b.connect_signals(self)

        w = self.window = b.get_object("window1")
        w.connect("delete-event", Gtk.main_quit)

        self.adc_q = Queue.Queue()
        self.time_q = Queue.Queue()
        self.outq = Queue.Queue()
        self.vq = Queue.Queue()
        self.last_adc = 0, 0

        self.times = []

        self.ser_thread = SerialThread(name="serial thread",
                                       args=(self.adc_q,self.time_q,
                                             self.outq,self.vq))
        self.ser_thread.daemon = True
        self.ser_thread.start()

        self.lag_label = b.get_object("lag_label")
        self.current_luminance_label = b.get_object("current_luminance_label")
        self.device_status = b.get_object("device_status_label")
        b.get_object('red_box').modify_bg( Gtk.StateType.NORMAL, Gdk.Color.parse('red')[1] )
        b.get_object('green_box').modify_bg( Gtk.StateType.NORMAL, Gdk.Color.parse('green')[1] )
        b.get_object('blue_box').modify_bg( Gtk.StateType.NORMAL, Gdk.Color.parse('blue')[1] )

        self.color_box = b.get_object("color_box")
        self.is_white = False
        _, self.black = Gdk.Color.parse('black')
        _, self.white = Gdk.Color.parse('white')

        b.get_object("clear_data_button").connect("clicked", self.on_clear_data)
        b.get_object("save_data_button").connect("clicked", self.on_save_data)

        self._last_canvas_update = 0
        self.off_on_canvas = LagPlotCanvas()
        box = b.get_object("off_on_plot_box")
        box.pack_start( self.off_on_canvas, True, True, 0 )

        self.on_off_canvas = LagPlotCanvas()
        box = b.get_object("on_off_plot_box")
        box.pack_start( self.on_off_canvas, True, True, 0 )

        self.on_clear_data()

        w.show_all()

        GLib.timeout_add(100, self.getdata)
        GLib.timeout_add(int(1000*DRAW_DT), self.update_ui)
        GLib.timeout_add(int(1000*SWITCH_DT), self.switch_color)
        GLib.timeout_add(int(1000*TRIM_DT), self.on_trim_data)

    def on_clear_data(self, btn=None):
        print 'cleared data'
        self.switches = []
        self.times = []
        self.adcs = []
        self.time_model = None

    def on_trim_data(self):
        keep_n_times = 500
        keep_n_switches = 5000
        samples_per_sec = 1000
        samples_per_switch = samples_per_sec*SWITCH_DT
        keep_n_samples = keep_n_switches * samples_per_switch

        if len(self.switches) > keep_n_switches:
            del self.switches[-keep_n_switches:]
        if len(self.times) > keep_n_times:
            del self.times[-keep_n_times:]
        if len(self.adcs) > keep_n_samples:
            del self.adcs[-keep_n_samples]
        return True

    def on_save_data(self, btn=None):
        fname = time.strftime( 'lagtest_%Y%m%d_%H%M%S.json' )
        data = {'switches':self.switches,
                'times':self.times,
                'adcs':self.adcs,
                }
        from_gui_names = ['manufacturer', 'model', 'comments', 'username']
        for name in from_gui_names:
            data[name] = self.builder.get_object(name).get_text()
        data['__version__'] = __version__
        data['__data_schema_version__'] = '1.0'

        with open(fname,mode='w') as fd:
            fd.write(json.dumps( data ))

        dialog = Gtk.MessageDialog(self.window, 0, Gtk.MessageType.INFO,
                                   Gtk.ButtonsType.OK, "Data successfully saved.")
        dialog.format_secondary_text(
            "Saved to %r"%fname)
        dialog.run()

        dialog.destroy()

    def make_fake_data(self):
        # no serial port - fake data
        if self.time_model is None:
            self.time_model = get_time_model( np.arange(10), np.arange(10) )
        if len(self.times)==0:
            for i in range(10):
                self.times.append( (i,i) )
        now = time.time()
        for i in range(100):
            nowi = now + i*0.001
            value1 = np.sin( nowi ) * 0.5 + 0.5
            value255 = int(value1*255)

            self.last_adc = ( nowi, value255 )
            self.adcs.append( self.last_adc )

    def getdata(self):
        if not self.ser_thread.is_alive():
            self.make_fake_data()
            return True

        # get all pending data
        while 1:
            try:
                self.last_adc = self.adc_q.get_nowait()
                self.adcs.append( self.last_adc )
            except Queue.Empty:
                break

        new_time = False
        while 1:
            try:
                self.times.append( self.time_q.get_nowait() )
                new_time = True
            except Queue.Empty:
                break

        if new_time and len(self.times) > 3:
                # require 3 samples to start attempting to fit model
                tdata = np.array(self.times[-100:])
                try:
                    self.time_model = get_time_model(tdata[:,1], tdata[:,0])
                except TimeFitError, err:
                    print 'WARNING: error fitting time_model: %s'%err

        return True

    def _update_plots(self):
        now = time.time()
        if (now-self._last_canvas_update) < PLOT_DT:
            return
        self._last_canvas_update = now

        switches = make_recarray( self.switches, 'time_host','value')
        adcs = make_recarray( self.adcs, 'time_ino','adc' )

        time_model = self.time_model
        if time_model is None:
            return

        WIDTH = 100
        accum = {0:[], 1:[]}

        t = None
        for switch_row in switches:
            time_host, value = switch_row
            time_arduino = time_model.timestamp2framestamp(time_host)

            idx = np.argmin(abs(adcs['time_ino']-time_arduino))
            idx_start = idx-WIDTH
            idx_stop = idx+WIDTH
            if idx_start < 0:
                continue
            if idx_stop >= len(adcs):
                continue
            accum[ value ].append( adcs['adc'][idx_start:idx_stop] )

            t = time_model.framestamp2timestamp(
                adcs['time_ino'][idx_start:idx_stop])
        if t is None:
            # not enough data yet?
            return
        t = (t-t[WIDTH])*1000.0

        m0 = self.on_off_canvas.new_data( t, accum[0] ).get('mean',None)
        m1 = self.off_on_canvas.new_data( t, accum[1] ).get('mean',None)

        if m0 is None or m1 is None:
            return

        # find crossover point where on->off is dimmer than off->on
        cond = m0 < m1
        try:
            idx = np.nonzero(cond)[0][0]
        except IndexError:
            return
        t_crossover = t[idx]
        self.lag_label.set_text('lag: %.1f msec'%(t_crossover))

        self.on_off_canvas.show_lag( t_crossover )
        self.off_on_canvas.show_lag( t_crossover )

        self.on_off_canvas.draw()
        self.off_on_canvas.draw()

    def update_ui(self):
        self._update_plots()
        self.current_luminance_label.set_text(
            'current luminance: % 3d'%self.last_adc[1])

        while 1:
            try:
                t = self.vq.get_nowait()
            except Queue.Empty:
                break
            else:
                self.device_status.set_text('USB status: %s'%t)

        return True

    def switch_color(self):
        if self.is_white:
            self.color_box.modify_bg( Gtk.StateType.NORMAL, self.black)
            self.is_white = False
        else:
            self.color_box.modify_bg( Gtk.StateType.NORMAL, self.white)
            self.is_white = True
        cval = int(self.is_white)
        self.outq.put( cval )
        flip_time = time_func()
        self.switches.append( (flip_time, cval) )
        return True

if __name__ == "__main__":
    u = MyApp()
    Gtk.main()
